{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/alican/Desktop/trace/src/App.js\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { Graph } from \"react-d3-graph\";\nimport * as d3 from \"d3\"; //import { sorted } from \"./util\";\n//import { Rect, flippedRect } from \"./rect\";\n//import calc from \"./calc\";\n\nimport { tracegraph } from \"@hownetworks/tracegraph\";\nimport { traceCurve, nodeGradient, genUID } from \"@hownetworks/tracegraph\"; // graph payload (with minimalist structure)\n\nconst data = {\n  nodes: [{\n    id: \"Harry\"\n  }, {\n    id: \"Sally\"\n  }, {\n    id: \"Alice\"\n  }],\n  links: [{\n    source: \"Harry\",\n    target: \"Sally\"\n  }, {\n    source: \"Harry\",\n    target: \"Alice\"\n  }]\n};\nconst graph = tracegraph();\ngraph.horizontal(true);\nconst traces = [{\n  hops: [{\n    root: true\n  }, {\n    info: Object,\n    ip: \"172.19.0.1\",\n    ttl: 1\n  }, {\n    timeout: true,\n    ttl: 2\n  }, {\n    info: Object,\n    ip: \"10.68.66.202\",\n    ttl: 3\n  }, {\n    info: Object,\n    ip: \"138.197.249.36\",\n    ttl: 4\n  }]\n}];\nconst layout = graph(traces); //const aa = traceCurve(layout);\n\nconsole.log(layout);\nconsole.log(\"-----\"); //console.log(graph.hopLevel(2));\n// the graph configuration, just override the ones you need\n\nconst myConfig = {\n  nodeHighlightBehavior: true,\n  node: {\n    color: \"lightgreen\",\n    size: 120,\n    highlightStrokeColor: \"blue\"\n  },\n  link: {\n    highlightColor: \"lightblue\"\n  }\n};\n\nconst onClickNode = function (nodeId) {\n  window.alert(`Clicked node ${nodeId}`);\n};\n\nconst onClickLink = function (source, target) {\n  window.alert(`Clicked link between ${source} and ${target}`);\n};\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Edit \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"src/App.js\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 16\n        }, this), \" and save to reload.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"App-link\",\n        href: \"https://reactjs.org\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Learn React\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), svg.selectAll(\".trace\").data(layout.traces).enter().append(\"path\").attr(\"class\", \"trace\").attr(\"d\", traceCurve()), /*#__PURE__*/_jsxDEV(Graph, {\n      id: \"graph-id\" // id is mandatory\n      ,\n      data: data,\n      config: myConfig,\n      onClickNode: onClickNode,\n      onClickLink: onClickLink\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), \";\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/alican/Desktop/trace/src/App.js"],"names":["Graph","d3","tracegraph","traceCurve","nodeGradient","genUID","data","nodes","id","links","source","target","graph","horizontal","traces","hops","root","info","Object","ip","ttl","timeout","layout","console","log","myConfig","nodeHighlightBehavior","node","color","size","highlightStrokeColor","link","highlightColor","onClickNode","nodeId","window","alert","onClickLink","App","logo","svg","selectAll","enter","append","attr"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport { Graph } from \"react-d3-graph\";\nimport * as d3 from \"d3\";\n//import { sorted } from \"./util\";\n//import { Rect, flippedRect } from \"./rect\";\n//import calc from \"./calc\";\nimport { tracegraph } from \"@hownetworks/tracegraph\";\nimport { traceCurve, nodeGradient, genUID } from \"@hownetworks/tracegraph\";\n\n\n\n// graph payload (with minimalist structure)\nconst data = {\n  nodes: [{ id: \"Harry\" }, { id: \"Sally\" }, { id: \"Alice\" }],\n  links: [\n    { source: \"Harry\", target: \"Sally\" },\n    { source: \"Harry\", target: \"Alice\" },\n  ],\n};\n\nconst graph = tracegraph();\ngraph.horizontal(true);\n\nconst traces = [{hops: [{root: true}, {info: Object, ip: \"172.19.0.1\", ttl: 1}, {timeout: true, ttl: 2}, {info: Object, ip: \"10.68.66.202\", ttl: 3}, {info: Object, ip: \"138.197.249.36\", ttl: 4}]}]\n\n\nconst layout = graph(traces);\n\n//const aa = traceCurve(layout);\n\nconsole.log(layout);\nconsole.log(\"-----\");\n//console.log(graph.hopLevel(2));\n\n\n// the graph configuration, just override the ones you need\nconst myConfig = {\n  nodeHighlightBehavior: true,\n  node: {\n    color: \"lightgreen\",\n    size: 120,\n    highlightStrokeColor: \"blue\",\n  },\n  link: {\n    highlightColor: \"lightblue\",\n  },\n};\n\nconst onClickNode = function(nodeId) {\n  window.alert(`Clicked node ${nodeId}`);\n};\n\nconst onClickLink = function(source, target) {\n  window.alert(`Clicked link between ${source} and ${target}`);\n};\n\n\n\n\n\n\n\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n\n      {\n\nsvg\n.selectAll(\".trace\")\n.data(layout.traces)\n.enter()\n.append(\"path\")\n.attr(\"class\", \"trace\")\n.attr(\"d\", traceCurve())\n      }\n   \n      <Graph\n  id=\"graph-id\" // id is mandatory\n  data={data}\n  config={myConfig}\n  onClickNode={onClickNode}\n  onClickLink={onClickLink}\n/>;\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n"]},"metadata":{},"sourceType":"module"}