{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/alican/Desktop/trace/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\"; //import './App.css';\n\nimport { Graph } from \"react-d3-graph\";\nimport * as d3 from \"d3\"; //import { sorted } from \"./util\";\n//import { Rect, flippedRect } from \"./rect\";\n//import calc from \"./calc\";\n\nimport { tracegraph } from \"@hownetworks/tracegraph\";\nimport { traceCurve, nodeGradient, genUID } from \"@hownetworks/tracegraph\";\nimport Treemap from './tmap'; // graph payload (with minimalist structure)\n\nconst data = {\n  nodes: [{\n    id: \"Harry\"\n  }, {\n    id: \"Sally\"\n  }, {\n    id: \"Alice\"\n  }],\n  links: [{\n    source: \"Harry\",\n    target: \"Sally\"\n  }, {\n    source: \"Harry\",\n    target: \"Alice\"\n  }]\n}; //const graph = tracegraph();\n//graph.horizontal(true);\n\nconst tracess = [{\n  hops: [{\n    root: true\n  }, {\n    info: Object,\n    ip: \"172.19.0.1\",\n    ttl: 1\n  }, {\n    timeout: true,\n    ttl: 2\n  }, {\n    info: Object,\n    ip: \"10.68.66.202\",\n    ttl: 3\n  }, {\n    info: Object,\n    ip: \"138.197.249.36\",\n    ttl: 4\n  }]\n}]; //const layout = graph(traces);\n//\n//\n//const aa = traceCurve(layout);\n//console.log(layout);\n\nconsole.log(\"-----\"); //console.log(graph.hopLevel(2));\n// the graph configuration, just override the ones you need\n\nconst myConfig = {\n  nodeHighlightBehavior: true,\n  node: {\n    color: \"lightgreen\",\n    size: 120,\n    highlightStrokeColor: \"blue\"\n  },\n  link: {\n    highlightColor: \"lightblue\"\n  }\n};\n\nconst onClickNode = function (nodeId) {\n  window.alert(`Clicked node ${nodeId}`);\n};\n\nconst onClickLink = function (source, target) {\n  window.alert(`Clicked link between ${source} and ${target}`);\n};\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Treemap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/alican/Desktop/trace/src/App.js"],"names":["React","Graph","d3","tracegraph","traceCurve","nodeGradient","genUID","Treemap","data","nodes","id","links","source","target","tracess","hops","root","info","Object","ip","ttl","timeout","console","log","myConfig","nodeHighlightBehavior","node","color","size","highlightStrokeColor","link","highlightColor","onClickNode","nodeId","window","alert","onClickLink","App"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;+BAEA;;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB,C,CACA;AACA;AACA;;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,UAAT,EAAqBC,YAArB,EAAmCC,MAAnC,QAAiD,yBAAjD;AACA,OAAOC,OAAP,MAAoB,QAApB,C,CAGA;;AACA,MAAMC,IAAI,GAAG;AACXC,EAAAA,KAAK,EAAE,CAAC;AAAEC,IAAAA,EAAE,EAAE;AAAN,GAAD,EAAkB;AAAEA,IAAAA,EAAE,EAAE;AAAN,GAAlB,EAAmC;AAAEA,IAAAA,EAAE,EAAE;AAAN,GAAnC,CADI;AAEXC,EAAAA,KAAK,EAAE,CACL;AAAEC,IAAAA,MAAM,EAAE,OAAV;AAAmBC,IAAAA,MAAM,EAAE;AAA3B,GADK,EAEL;AAAED,IAAAA,MAAM,EAAE,OAAV;AAAmBC,IAAAA,MAAM,EAAE;AAA3B,GAFK;AAFI,CAAb,C,CAQA;AACA;;AAIA,MAAMC,OAAO,GAAG,CAAC;AAACC,EAAAA,IAAI,EAAE,CAAC;AAACC,IAAAA,IAAI,EAAE;AAAP,GAAD,EAAe;AAACC,IAAAA,IAAI,EAAEC,MAAP;AAAeC,IAAAA,EAAE,EAAE,YAAnB;AAAiCC,IAAAA,GAAG,EAAE;AAAtC,GAAf,EAAyD;AAACC,IAAAA,OAAO,EAAE,IAAV;AAAgBD,IAAAA,GAAG,EAAE;AAArB,GAAzD,EAAkF;AAACH,IAAAA,IAAI,EAAEC,MAAP;AAAeC,IAAAA,EAAE,EAAE,cAAnB;AAAmCC,IAAAA,GAAG,EAAE;AAAxC,GAAlF,EAA8H;AAACH,IAAAA,IAAI,EAAEC,MAAP;AAAeC,IAAAA,EAAE,EAAE,gBAAnB;AAAqCC,IAAAA,GAAG,EAAE;AAA1C,GAA9H;AAAP,CAAD,CAAhB,C,CAGA;AAEA;AAOA;AAUA;AAEA;;AACAE,OAAO,CAACC,GAAR,CAAY,OAAZ,E,CACA;AAGA;;AACA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,qBAAqB,EAAE,IADR;AAEfC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,YADH;AAEJC,IAAAA,IAAI,EAAE,GAFF;AAGJC,IAAAA,oBAAoB,EAAE;AAHlB,GAFS;AAOfC,EAAAA,IAAI,EAAE;AACJC,IAAAA,cAAc,EAAE;AADZ;AAPS,CAAjB;;AAYA,MAAMC,WAAW,GAAG,UAASC,MAAT,EAAiB;AACnCC,EAAAA,MAAM,CAACC,KAAP,CAAc,gBAAeF,MAAO,EAApC;AACD,CAFD;;AAIA,MAAMG,WAAW,GAAG,UAASxB,MAAT,EAAiBC,MAAjB,EAAyB;AAC3CqB,EAAAA,MAAM,CAACC,KAAP,CAAc,wBAAuBvB,MAAO,QAAOC,MAAO,EAA1D;AACD,CAFD;;AAQA,SAASwB,GAAT,GAAe;AACb,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BAKD;AAAA,6BACA,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AALC;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;KAbQA,G;AAeT,eAAeA,GAAf","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\n//import './App.css';\nimport { Graph } from \"react-d3-graph\";\nimport * as d3 from \"d3\";\n//import { sorted } from \"./util\";\n//import { Rect, flippedRect } from \"./rect\";\n//import calc from \"./calc\";\nimport { tracegraph } from \"@hownetworks/tracegraph\";\nimport { traceCurve, nodeGradient, genUID } from \"@hownetworks/tracegraph\";\nimport Treemap from './tmap';\n\n\n// graph payload (with minimalist structure)\nconst data = {\n  nodes: [{ id: \"Harry\" }, { id: \"Sally\" }, { id: \"Alice\" }],\n  links: [\n    { source: \"Harry\", target: \"Sally\" },\n    { source: \"Harry\", target: \"Alice\" },\n  ],\n};\n\n//const graph = tracegraph();\n//graph.horizontal(true);\n\n\n\nconst tracess = [{hops: [{root: true}, {info: Object, ip: \"172.19.0.1\", ttl: 1}, {timeout: true, ttl: 2}, {info: Object, ip: \"10.68.66.202\", ttl: 3}, {info: Object, ip: \"138.197.249.36\", ttl: 4}]}]\n\n\n//const layout = graph(traces);\n\n//\n\n\n\n\n\n\n//\n\n\n\n\n\n\n\n\n\n//const aa = traceCurve(layout);\n\n//console.log(layout);\nconsole.log(\"-----\");\n//console.log(graph.hopLevel(2));\n\n\n// the graph configuration, just override the ones you need\nconst myConfig = {\n  nodeHighlightBehavior: true,\n  node: {\n    color: \"lightgreen\",\n    size: 120,\n    highlightStrokeColor: \"blue\",\n  },\n  link: {\n    highlightColor: \"lightblue\",\n  },\n};\n\nconst onClickNode = function(nodeId) {\n  window.alert(`Clicked node ${nodeId}`);\n};\n\nconst onClickLink = function(source, target) {\n  window.alert(`Clicked link between ${source} and ${target}`);\n};\n\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n\n\n\n   <div>\n   <Treemap />\n   </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n\n\n\n"]},"metadata":{},"sourceType":"module"}